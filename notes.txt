Name
Primary Skillset
Experience in Go (If any)
Any specific expectations from the training?
Anything interesting you read (book) / Watched a movie / show?

Pushkin Vertigo
Downton Abbey
http://justwatch.com

Schedule
9:30 - commence
11:00 - Tea break for 20 mins
1:00 - Lunch break for 60 mins
3:30 - Tea break for 20 mins
5:30 - Wind up

Methodology
    No powerpoints

Golang
    Why?


    - C
~1980 - C++
1995 - Java
1999 - C# & .NET
~1999 - Ruby
2008 - Golang


Concurrency support in the Language
    Built for concurrency
    go, chan, range, select
    Builtin Scheduler
    1000s of concurrent operations in 1 thread
    No exceptions (ONLY errors)

Simplest languages
    25 keywords
    No classes
        Only structs & functions
        Composition over Inheritance


golang.org
visualstudio code (http://code.visualstudio.com)

Go environment variables
    GOROOT
        - go tools installation folder

    
Data Types in Golang
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32) (representing 1 unicode character)

    NO implicity type conversion

Constructs
    if else, switch case, for


Build an interactive calculator
    
    1. Add
    2. Subtract
    3. Multiply
    4. Divide
    5. Exit

Higher Order functions
    Functions can be assigned to variables
    Functions can be passed as arguments to other functions
    Functions can be returned as return values from other functions


count() //=> 1
count() //=> 2
count() //=> 3

Collections
    Array
        Fixed size collection
        The data has to be of the same type

    Slice
        Variable size collection
        It uses an Array internally
        The data has to be of the same type
        Apis to manipulate a slice (append, len)

    Map
        collection of key/value pairs
        The type of the key and value are customizable


Write a program that intializes a []int with 20 random values and split the list into two lists : one for even numbers and one for numbers and print the even & odd list


Write a program that will group the words in the given sentence by the size of the word and print the most occurant 'word size'

"Velit officia dolor excepteur eu Lorem deserunt excepteur anim ullamco. Sunt ex tempor sit ullamco do irure irure pariatur nisi. Ipsum ullamco id ex elit ut labore dolor amet Lorem. Anim non aliquip cupidatat duis. Sint commodo sit esse ipsum sunt in ea excepteur enim fugiat. Sunt tempor cillum laboris enim elit sint tempor ullamco culpa ut ea. Eu elit do est voluptate deserunt exercitation aliquip labore anim duis velit eiusmod laborum irure. Amet cupidatat ad veniam in aliqua velit pariatur elit incididunt esse veniam nulla. In irure sunt aliqua minim ipsum nostrud sit nulla dolore sit."

Errors

Given the following slice of products
    products := []Product{
		{id: 100, name: "Pen", cost: 10, units: 10, category: "stationary"},
		{id: 106, name: "Den", cost: 16, units: 50, category: "stationary"},
		{id: 107, name: "Ken", cost: 12, units: 20, category: "utencil"},
		{id: 102, name: "Zen", cost: 18, units: 70, category: "stationary"},
		{id: 104, name: "Ten", cost: 15, units: 30, category: "utencil"},
		{id: 103, name: "Len", cost: 14, units: 50, category: "stationary"},
	}

Write the following utility functions for the products slice
Index(product) => index of the given product in the slice 
Include(product) => true / false based on the presence of the given product in the slice
Any() => if there is any product matching the given criteria (user defined)
All() => return true/false based on all the products matching the given criteria (user defined)
Filter() => return the products matching the given criteria (user defined)


Implement the "Sort" for the "Products" type

Single Threaded
    (+) Less Resource 
    (-) NOT for CPU intensive operations
    (-) callbacks will make the application difficult to maintain

Multi Threaded
    (+) Code is reasonably easy to maintain
    (-) Resource Intensive

